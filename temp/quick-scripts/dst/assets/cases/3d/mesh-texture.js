
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/cases/3d/mesh-texture.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '95a3dIihBlE1bM4psBuANTA', 'mesh-texture');
// cases/3d/mesh-texture.js

"use strict";

var gfx = cc.gfx;
cc.Class({
  "extends": cc.Component,
  editor: {
    executeInEditMode: true
  },
  properties: {
    speed: 50
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    var vfmt = new gfx.VertexFormat([{
      name: gfx.ATTR_POSITION,
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: gfx.ATTR_UV0,
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 2
    }]);
    var mesh = new cc.Mesh();
    mesh.init(vfmt, 9, true);
    this.mesh = mesh;
    this.vertexes = [cc.v2(-100, 100), cc.v2(0, 100), cc.v2(100, 100), cc.v2(-100, 0), cc.v2(0, 0), cc.v2(100, 0), cc.v2(-100, -100), cc.v2(0, -100), cc.v2(100, -100)];
    mesh.setVertices(gfx.ATTR_POSITION, this.vertexes);
    mesh.setVertices(gfx.ATTR_UV0, [cc.v2(0, 0), cc.v2(0.5, 0), cc.v2(1, 0), cc.v2(0, 0.5), cc.v2(0.5, 0.5), cc.v2(1, 0.5), cc.v2(0, 1), cc.v2(0.5, 1), cc.v2(1, 1)]);
    mesh.setIndices([0, 1, 3, 1, 4, 3, 1, 2, 4, 2, 5, 4, 3, 4, 6, 4, 7, 6, 4, 5, 7, 5, 8, 7]);
    var renderer = this.node.getComponent(cc.MeshRenderer);

    if (!renderer) {
      renderer = this.node.addComponent(cc.MeshRenderer);
    }

    renderer.mesh = mesh;
    this.mesh = mesh;
  },
  update: function update(dt) {
    if (CC_EDITOR) return;
    var lm = this.vertexes[3];
    var rm = this.vertexes[5];

    if (lm.x < -200 && this.speed < 0 || lm.x > 0 && this.speed > 0) {
      this.speed *= -1;
    }

    lm.x += dt * this.speed;
    rm.x += -dt * this.speed;
    this.mesh.setVertices(gfx.ATTR_POSITION, this.vertexes);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jYXNlcy8zZC9tZXNoLXRleHR1cmUuanMiXSwibmFtZXMiOlsiZ2Z4IiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsImVkaXRvciIsImV4ZWN1dGVJbkVkaXRNb2RlIiwicHJvcGVydGllcyIsInNwZWVkIiwic3RhcnQiLCJ2Zm10IiwiVmVydGV4Rm9ybWF0IiwibmFtZSIsIkFUVFJfUE9TSVRJT04iLCJ0eXBlIiwiQVRUUl9UWVBFX0ZMT0FUMzIiLCJudW0iLCJBVFRSX1VWMCIsIm1lc2giLCJNZXNoIiwiaW5pdCIsInZlcnRleGVzIiwidjIiLCJzZXRWZXJ0aWNlcyIsInNldEluZGljZXMiLCJyZW5kZXJlciIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJNZXNoUmVuZGVyZXIiLCJhZGRDb21wb25lbnQiLCJ1cGRhdGUiLCJkdCIsIkNDX0VESVRPUiIsImxtIiwicm0iLCJ4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLEdBQUcsR0FBR0MsRUFBRSxDQUFDRCxHQUFiO0FBRUFDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0VBQ0wsV0FBU0QsRUFBRSxDQUFDRSxTQURQO0VBRUxDLE1BQU0sRUFBRTtJQUNKQyxpQkFBaUIsRUFBRTtFQURmLENBRkg7RUFNTEMsVUFBVSxFQUFFO0lBQ1JDLEtBQUssRUFBRTtFQURDLENBTlA7RUFVTDtFQUVBO0VBRUFDLEtBZEssbUJBY0k7SUFDTCxJQUFJQyxJQUFJLEdBQUcsSUFBSVQsR0FBRyxDQUFDVSxZQUFSLENBQXFCLENBQzVCO01BQUVDLElBQUksRUFBRVgsR0FBRyxDQUFDWSxhQUFaO01BQTJCQyxJQUFJLEVBQUViLEdBQUcsQ0FBQ2MsaUJBQXJDO01BQXdEQyxHQUFHLEVBQUU7SUFBN0QsQ0FENEIsRUFFNUI7TUFBRUosSUFBSSxFQUFFWCxHQUFHLENBQUNnQixRQUFaO01BQXNCSCxJQUFJLEVBQUViLEdBQUcsQ0FBQ2MsaUJBQWhDO01BQW1EQyxHQUFHLEVBQUU7SUFBeEQs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QUFlO0lBRWYsSUFBSUMsRUFBRSxHQUFHLEtBQUtaLFFBQUwsQ0FBYyxDQUFkLENBQVQ7SUFDQSxJQUFJYSxFQUFFLEdBQUcsS0FBS2IsUUFBTCxDQUFjLENBQWQsQ0FBVDs7SUFDQSxJQUFLWSxFQUFFLENBQUNFLENBQUgsR0FBTyxDQUFDLEdBQVIsSUFBZSxLQUFLM0IsS0FBTCxHQUFhLENBQTdCLElBQW9DeUIsRUFBRSxDQUFDRSxDQUFILEdBQU8sQ0FBUCxJQUFZLEtBQUszQixLQUFMLEdBQWEsQ0FBakUsRUFBcUU7TUFDakUsS0FBS0EsS0FBTCxJQUFjLENBQUMsQ0FBZjtJQUNIOztJQUNEeUIsRUFBRSxDQUFDRSxDQUFILElBQVFKLEVBQUUsR0FBRyxLQUFLdkIsS0FBbEI7SUFDQTBCLEVBQUUsQ0FBQ0MsQ0FBSCxJQUFRLENBQUNKLEVBQUQsR0FBTSxLQUFLdkIsS0FBbkI7SUFFQSxLQUFLVSxJQUFMLENBQVVLLFdBQVYsQ0FBc0J0QixHQUFHLENBQUNZLGFBQTFCLEVBQXlDLEtBQUtRLFFBQTlDO0VBQ0g7QUFqRUksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGdmeCA9IGNjLmdmeDtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcbiAgICBlZGl0b3I6IHtcbiAgICAgICAgZXhlY3V0ZUluRWRpdE1vZGU6IHRydWVcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBzcGVlZDogNTBcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICAvLyBvbkxvYWQgKCkge30sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHZhciB2Zm10ID0gbmV3IGdmeC5WZXJ0ZXhGb3JtYXQoW1xuICAgICAgICAgICAgeyBuYW1lOiBnZnguQVRUUl9QT1NJVElPTiwgdHlwZTogZ2Z4LkFUVFJfVFlQRV9GTE9BVDMyLCBudW06IDIgfSxcbiAgICAgICAgICAgIHsgbmFtZTogZ2Z4LkFUVFJfVVYwLCB0eXBlOiBnZnguQVRUUl9UWVBFX0ZMT0FUMzIsIG51bTogMiB9LFxuICAgICAgICBdKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBtZXNoID0gbmV3IGNjLk1lc2goKTtcbiAgICAgICAgbWVzaC5pbml0KHZmbXQsIDksIHRydWUpO1xuICAgICAgICB0aGlzLm1lc2ggPSBtZXNoO1xuICAgICAgICBcbiAgICAgICAgdGhpcy52ZXJ0ZXhlcyA9IFtcbiAgICAgICAgICAgIGNjLnYyKC0xMDAsIDEwMCksIGNjLnYyKDAsIDEwMCksIGNjLnYyKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIGNjLnYyKC0xMDAsIDApLCBjYy52MigwLCAwKSwgY2MudjIoMTAwLCAwKSxcbiAgICAgICAgICAgIGNjLnYyKC0xMDAsIC0xMDApLCBjYy52MigwLCAtMTAwKSwgY2MudjIoMTAwLCAtMTAwKVxuICAgICAgICBdO1xuXG4gICAgICAgIG1lc2guc2V0VmVydGljZXMoZ2Z4LkFUVFJfUE9TSVRJT04sIHRoaXMudmVydGV4ZXMpO1xuXG4gICAgICAgIG1lc2guc2V0VmVydGljZXMoZ2Z4LkFUVFJfVVYwLCBbXG4gICAgICAgICAgICBjYy52MigwLDApLCBjYy52MigwLjUsMCksIGNjLnYyKDEsIDApLFxuICAgICAgICAgICAgY2MudjIoMCwwLjUpLCBjYy52MigwLjUsMC41KSwgY2MudjIoMSwwLjUpLFxuICAgICAgICAgICAgY2MudjIoMCwgMSksIGNjLnYyKDAuNSwgMSksIGNjLnYyKDEsIDEpLFxuICAgICAgICBdKTtcblxuICAgICAgICBtZXNoLnNldEluZGljZXMoW1xuICAgICAgICAgICAgMCwgMSwgMywgMSwgNCwgMyxcbiAgICAgICAgICAgIDEsIDIsIDQsIDIsIDUsIDQsXG4gICAgICAgICAgICAzLCA0LCA2LCA0LCA3LCA2LFxuICAgICAgICAgICAgNCwgNSwgNywgNSwgOCwgN1xuICAgICAgICBdKTtcblxuICAgICAgICBsZXQgcmVuZGVyZXIgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLk1lc2hSZW5kZXJlcik7XG4gICAgICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyID0gdGhpcy5ub2RlLmFkZENvbXBvbmVudChjYy5NZXNoUmVuZGVyZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcmVyLm1lc2ggPSBtZXNoO1xuICAgICAgICB0aGlzLm1lc2ggPSBtZXNoO1xuICAgIH0sXG5cbiAgICB1cGRhdGUgKGR0KSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGxldCBsbSA9IHRoaXMudmVydGV4ZXNbM107XG4gICAgICAgIGxldCBybSA9IHRoaXMudmVydGV4ZXNbNV07XG4gICAgICAgIGlmICgobG0ueCA8IC0yMDAgJiYgdGhpcy5zcGVlZCA8IDApIHx8IChsbS54ID4gMCAmJiB0aGlzLnNwZWVkID4gMCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgbG0ueCArPSBkdCAqIHRoaXMuc3BlZWQ7XG4gICAgICAgIHJtLnggKz0gLWR0ICogdGhpcy5zcGVlZDtcblxuICAgICAgICB0aGlzLm1lc2guc2V0VmVydGljZXMoZ2Z4LkFUVFJfUE9TSVRJT04sIHRoaXMudmVydGV4ZXMpO1xuICAgIH0sXG59KTtcbiJdfQ==