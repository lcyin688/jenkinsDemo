{"version":3,"sources":["assets/cases/3d/raycast.js"],"names":["WHITE","cc","Color","Class","Component","properties","mesh","Node","start","canvas","find","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","touchPos","results","event","touch","getLocation","raycast","pos","ray","Camera","main","getRay","geomUtils","intersect","node","update","dt","i","length","opacity","distance","d","vmath","vec3","normalize","v3","p","scaleAndAdd","o","position"],"mappings":"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","sourceRoot":"/","sourcesContent":["const WHITE = cc.Color.WHITE;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        mesh: cc.Node\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        var canvas = cc.find('Canvas');\n        canvas.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\n        canvas.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        canvas.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\n\n        this.touchPos = null;\n        this.results = [];\n    },\n\n    onTouchStart (event) {\n        this.touchPos = event.touch.getLocation();\n    },\n\n    onTouchMove (event) {\n        this.touchPos = event.touch.getLocation();\n    },\n\n    onTouchEnd (event) {\n        this.touchPos = null;\n    },\n\n    raycast (pos) {\n        let ray = cc.Camera.main.getRay(pos);\n        return cc.geomUtils.intersect.raycast(this.node, ray);\n    },\n\n    update (dt) {\n        for (let i = 0; i < this.results.length; i++) {\n            this.results[i].node.opacity = 255;\n        }\n        this.results.length = 0;\n\n        if (!this.touchPos) return;\n\n        let ray = cc.Camera.main.getRay(this.touchPos);\n        let results = cc.geomUtils.intersect.raycast(this.node, ray);\n        if (results.length > 0) {\n            // results[0].node.opacity = 100;\n\n            let distance = results[0].distance;\n            \n            let d = cc.vmath.vec3.normalize(cc.v3(), ray.d);\n            let p = cc.vmath.vec3.scaleAndAdd(cc.v3(), ray.o, d, distance);\n            this.mesh.position = p;\n        }\n        this.results = results;\n    },\n});\n"]}