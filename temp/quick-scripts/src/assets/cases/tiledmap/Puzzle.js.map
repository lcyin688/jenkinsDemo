{"version":3,"sources":["assets/cases/tiledmap/Puzzle.js"],"names":["MoveDirection","cc","Enum","NONE","UP","DOWN","LEFT","RIGHT","minTilesCount","mapMoveStep","minMoveValue","Class","Component","editor","requireComponent","TiledMap","properties","_touchStartPos","serializable","_touching","_isMapLoaded","floorLayerName","barrierLayerName","objectGroupName","startObjectName","successObjectName","onLoad","_player","node","getChildByName","active","systemEvent","on","SystemEvent","EventType","KEY_UP","_onKeyPressed","Node","TOUCH_START","event","touch","getLocation","TOUCH_END","_succeedLayer","touchPos","movedX","x","movedY","y","movedXValue","Math","abs","movedYValue","newTile","v2","_curTile","mapMoveDir","_tryMoveToNewTile","onDestroy","off","restartGame","_initMapPos","_startTile","_updatePlayerPos","start","err","getParent","_tiledMap","getComponent","objectGroup","getObjectGroup","startObj","getObject","endObj","startPos","endPos","_layerFloor","getLayer","_layerBarrier","_getTilePos","_endTile","setPosition","visibleRect","bottomLeft","pos","getPositionAt","posInPixel","mapSize","getContentSize","tileSize","getTileSize","floor","width","height","keyCode","macro","KEY","up","down","left","right","getMapSize","getTileGIDAt","log","_tryMoveMap","equals","moveDir","mapContentSize","mapPos","getPosition","playerPos","viewSize","size","minDisX","minDisY","disX","disY","newPos","minX","maxX","minY","bottom","maxY"],"mappings":"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","sourceRoot":"/","sourcesContent":["var MoveDirection = cc.Enum({\n    NONE: 0,\n    UP: 1,\n    DOWN: 2,\n    LEFT: 3,\n    RIGHT: 4\n});\n\nvar minTilesCount = 2;\nvar mapMoveStep = 1;\nvar minMoveValue = 50;\n\ncc.Class({\n    extends: cc.Component,\n    editor: {\n        requireComponent: cc.TiledMap\n    },\n\n    properties: {\n        _touchStartPos: {\n            default: null,\n            serializable: false,\n        },\n        _touching: {\n            default: false,\n            serializable: false,\n        },\n\n        _isMapLoaded : {\n            default: false,\n            serializable: false,\n        },\n\n        floorLayerName: {\n            default: 'floor'\n        },\n\n        barrierLayerName: {\n            default: 'barrier'\n        },\n\n        objectGroupName: {\n            default: 'players'\n        },\n\n        startObjectName: {\n            default:'SpawnPoint'\n        },\n\n        successObjectName: {\n            default:'SuccessPoint'\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this._player = this.node.getChildByName('player');\n        if (! this._isMapLoaded) {\n            this._player.active = false;\n        }\n\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this._onKeyPressed, this);\n\n        this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\n            this._touching = true;\n            this._touchStartPos = event.touch.getLocation();\n        });\n        this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\n            if (!this._touching || !this._isMapLoaded || this._succeedLayer.active) return;\n\n            this._touching = false;\n            var touchPos = event.touch.getLocation();\n            var movedX = touchPos.x - this._touchStartPos.x;\n            var movedY = touchPos.y - this._touchStartPos.y;\n            var movedXValue = Math.abs(movedX);\n            var movedYValue = Math.abs(movedY);\n            if (movedXValue < minMoveValue && movedYValue < minMoveValue) {\n                // touch moved not enough\n                return;\n            }\n\n            var newTile = cc.v2(this._curTile.x, this._curTile.y);\n            var mapMoveDir = MoveDirection.NONE;\n            if (movedXValue >= movedYValue) {\n                // move to right or left\n                if (movedX > 0) {\n                    newTile.x += 1;\n                    mapMoveDir = MoveDirection.LEFT;\n                } else {\n                    newTile.x -= 1;\n                    mapMoveDir = MoveDirection.RIGHT;\n                }\n            } else {\n                // move to up or down\n                if (movedY > 0) {\n                    newTile.y -= 1;\n                    mapMoveDir = MoveDirection.DOWN;\n                } else {\n                    newTile.y += 1;\n                    mapMoveDir = MoveDirection.UP;\n                }\n            }\n            this._tryMoveToNewTile(newTile, mapMoveDir);\n        });\n    },\n\n    onDestroy () {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this._onKeyPressed, this);\n    },\n\n    restartGame: function() {\n        this._succeedLayer.active = false;\n        this._initMapPos();\n        this._curTile = this._startTile;\n        this._updatePlayerPos();\n    },\n\n    start: function(err) {\n        if (err) return;\n\n        // init the map position\n        this._initMapPos();\n\n        // init the succeed layer\n        this._succeedLayer = this.node.getParent().getChildByName('succeedLayer');\n        this._succeedLayer.active = false;\n\n        // init the player position\n        this._tiledMap = this.node.getComponent('cc.TiledMap');\n        var objectGroup = this._tiledMap.getObjectGroup(this.objectGroupName);\n        if (!objectGroup) return;\n\n        var startObj = objectGroup.getObject(this.startObjectName);\n        var endObj = objectGroup.getObject(this.successObjectName);\n        if (!startObj || !endObj) return;\n\n        var startPos = cc.v2(startObj.x, startObj.y);\n        var endPos = cc.v2(endObj.x, endObj.y);\n\n        this._layerFloor = this._tiledMap.getLayer(this.floorLayerName);\n        this._layerBarrier = this._tiledMap.getLayer(this.barrierLayerName);\n        if (!this._layerFloor || !this._layerBarrier) return;\n\n        this._curTile = this._startTile = this._getTilePos(startPos);\n        this._endTile = this._getTilePos(endPos);\n\n        if (this._player) {\n            this._updatePlayerPos();\n            this._player.active = true;\n        }\n\n        this._isMapLoaded = true;\n    },\n\n    _initMapPos: function() {\n        this.node.setPosition(cc.visibleRect.bottomLeft);\n    },\n\n    _updatePlayerPos: function() {\n        var pos = this._layerFloor.getPositionAt(this._curTile);\n        this._player.setPosition(pos);\n    },\n\n    _getTilePos: function(posInPixel) {\n        var mapSize = this.node.getContentSize();\n        var tileSize = this._tiledMap.getTileSize();\n        var x = Math.floor(posInPixel.x / tileSize.width);\n        var y = Math.floor((mapSize.height - posInPixel.y) / tileSize.height);\n\n        return cc.v2(x, y);\n    },\n\n    _onKeyPressed: function(event) {\n        if (!this._isMapLoaded || this._succeedLayer.active) return;\n\n        var newTile = cc.v2(this._curTile.x, this._curTile.y);\n        var mapMoveDir = MoveDirection.NONE;\n        switch(event.keyCode) {\n            case cc.macro.KEY.up:\n                newTile.y -= 1;\n                mapMoveDir = MoveDirection.DOWN;\n                break;\n            case cc.macro.KEY.down:\n                newTile.y += 1;\n                mapMoveDir = MoveDirection.UP;\n                break;\n            case cc.macro.KEY.left:\n                newTile.x -= 1;\n                mapMoveDir = MoveDirection.RIGHT;\n                break;\n            case cc.macro.KEY.right:\n                newTile.x += 1;\n                mapMoveDir = MoveDirection.LEFT;\n                break;\n            default:\n                return;\n        }\n\n        this._tryMoveToNewTile(newTile, mapMoveDir);\n    },\n\n    _tryMoveToNewTile: function(newTile, mapMoveDir) {\n        var mapSize = this._tiledMap.getMapSize();\n        if (newTile.x < 0 || newTile.x >= mapSize.width) return;\n        if (newTile.y < 0 || newTile.y >= mapSize.height) return;\n\n        if (this._layerBarrier.getTileGIDAt(newTile)) {\n            cc.log('This way is blocked!');\n            return false;\n        }\n\n        // update the player position\n        this._curTile = newTile;\n        this._updatePlayerPos();\n\n        // move the map if necessary\n        this._tryMoveMap(mapMoveDir);\n\n        // check the player is success or not\n        if (this._curTile.equals(this._endTile)) {\n            cc.log('succeed');\n            this._succeedLayer.active = true;\n        }\n    },\n\n    _tryMoveMap: function(moveDir) {\n        // get necessary data\n        var mapContentSize = this.node.getContentSize();\n        var mapPos = this.node.getPosition();\n        var playerPos = this._player.getPosition();\n        var viewSize = cc.size(cc.visibleRect.width, cc.visibleRect.height);\n        var tileSize = this._tiledMap.getTileSize();\n        var minDisX = minTilesCount * tileSize.width;\n        var minDisY = minTilesCount * tileSize.height;\n\n        var disX = playerPos.x + mapPos.x;\n        var disY = playerPos.y + mapPos.y;\n        var newPos;\n        switch (moveDir) {\n            case MoveDirection.UP:\n                if (disY < minDisY) {\n                    newPos = cc.v2(mapPos.x, mapPos.y + tileSize.height * mapMoveStep);\n                }\n                break;\n            case MoveDirection.DOWN:\n                if (viewSize.height - disY - tileSize.height < minDisY) {\n                    newPos = cc.v2(mapPos.x, mapPos.y - tileSize.height * mapMoveStep);\n                }\n                break;\n            case MoveDirection.LEFT:\n                if (viewSize.width - disX - tileSize.width < minDisX) {\n                    newPos = cc.v2(mapPos.x - tileSize.width * mapMoveStep, mapPos.y);\n                }\n                break;\n            case MoveDirection.RIGHT:\n                if (disX < minDisX) {\n                    newPos = cc.v2(mapPos.x + tileSize.width * mapMoveStep, mapPos.y);\n                }\n                break;\n            default:\n                return;\n        }\n\n        if (newPos) {\n            // calculate the position range of map\n            var minX = viewSize.width - mapContentSize.width - cc.visibleRect.left;\n            var maxX = cc.visibleRect.left.x;\n            var minY = viewSize.height - mapContentSize.height - cc.visibleRect.bottom;\n            var maxY = cc.visibleRect.bottom.y;\n\n            if (newPos.x < minX) newPos.x = minX;\n            if (newPos.x > maxX) newPos.x = maxX;\n            if (newPos.y < minY) newPos.y = minY;\n            if (newPos.y > maxY) newPos.y = maxY;\n\n            if (!newPos.equals(mapPos)) {\n                cc.log('Move the map to new position: ', newPos);\n                this.node.setPosition(newPos);\n            }\n        }\n    }\n});\n"]}