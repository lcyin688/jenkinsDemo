{"version":3,"sources":["assets/cases/graphics/demo/doodle.js"],"names":["cc","Class","Component","properties","reactivity","debug","onEnable","graphics","getComponent","Graphics","nodes","ripples","mouse","x","y","color","r","g","b","a","cycle","createBezierNodes","canvas","find","on","Node","EventType","TOUCH_START","touch","event","getLocation","addRipple","TOUCH_END","input","updateColorCycle","quantity","len","theta","Math","PI","winSize","width","cos","height","sin","push","vx","vy","lastX","lastY","min","max","disturb","orbit","angle","random","speed","length","fade","update","dt","ease","friction","index","ripple","splice","forEach","call","node","render","currentIndex","nextIndex","xc","yc","clear","strokeColor","fromHEX","fillColor","lineWidth","moveTo","N","quadraticCurveTo","fill","stroke","lineCap","LineCap","ROUND","lineJoin","LineJoin","lineTo","circle"],"mappings":"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","sourceRoot":"/","sourcesContent":["// http://codepen.io/Francext/pen/ojwdJ\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        reactivity: 0.5,\n        debug: false\n    },\n\n    // use this for initialization\n    onEnable: function () {\n        this.graphics = this.getComponent(cc.Graphics);\n\n        this.nodes = [];\n        this.ripples = [];\n        this.mouse = { x: 0, y: 0 };\n        this.color = { r: 0, g: 0, b: 0, a: 255 };\n        this.cycle = 90;\n\n        this.createBezierNodes();\n\n        let canvas = cc.find('Canvas');\n        canvas.on(cc.Node.EventType.TOUCH_START, function (touch, event) {\n            this.mouse = touch.getLocation();\n            this.addRipple();\n        }, this);\n        canvas.on(cc.Node.EventType.TOUCH_END, function () {\n            this.input = false;\n        }, this);\n    },\n    \n    createBezierNodes: function () {\n    \n        this.updateColorCycle();\n    \n        for(var quantity = 0, len = 6; quantity < len; quantity++) {\n                \n            var theta = Math.PI * 2 * quantity / len;\n            \n            var x = cc.winSize.width * 0.5 + 0 * Math.cos(theta);\n            var y = cc.winSize.height * 0.5 + 0 * Math.sin(theta);\n            \n            this.nodes.push({\n                    \n                x: x,\n                y: y,\n                vx: 0,\n                vy: 0,\n                \n                lastX: x,\n                lastY: y,\n                \n                min: 150,\n                max: 250,\n                disturb: 150,\n                \n                orbit: 20,\n                angle: Math.random() * Math.PI * 2,\n                speed: 0.05 + Math.random() * 0.05,\n                                                \n                theta: theta\n            \n            });\n                    \n        }\n    },\n\n    addRipple: function() {\n\n        this.input = true;\n        \n        if(this.ripples.length === 0) {\n    \n            this.updateColorCycle();\n    \n            this.ripples.push({\n        \n                x: this.mouse.x,\n                y: this.mouse.y,\n            \n                reactivity: 0,\n                fade: 1.0\n        \n            });\n            \n        }\n    \n    },\n    \n    updateColorCycle: function () {\n    \n        this.cycle = Math.min(this.cycle + this.reactivity + 0.3, 100) !== 100 ? this.cycle += this.reactivity + 0.3 : 0;\n        \n        let color = this.color;\n        color.r = ~~(Math.sin(0.3 * this.cycle + 0) * 127 + 128);\n        color.g = ~~(Math.sin(0.3 * this.cycle + 2) * 127 + 128);\n        color.b = ~~( Math.sin(0.3 * this.cycle + 4) * 127 + 128);\n    \n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n\n        var ease = 0.01, friction = 0.98;\n        \n        for(var index = 0; index < ripples.length; index++) {\n        \n            var ripple = ripples[index];\n        \n            ripple.reactivity += 5;\n            ripple.fade -= 0.05;\n            \n            if(ripple.fade <= 0.0)\n            \n                ripples.splice(index, 1);\n                \n        }\n    \n        [].forEach.call(nodes, (node, index) => {\n                        \n            node.lastX += (cc.winSize.width * 0.5 + node.disturb * Math.cos(node.theta) - node.lastX) * 0.08;\n            node.lastY += (cc.winSize.height * 0.5 + node.disturb * Math.sin(node.theta) - node.lastY) * 0.08;\n            \n            // Motion\n            node.x += ((node.lastX + Math.cos(node.angle) * node.orbit) - node.x) * 0.08;\n            node.y += ((node.lastY + Math.sin(node.angle) * node.orbit) - node.y) * 0.08;\n        \n            // Ease\n            node.vx += (node.min - node.disturb) * ease;\n        \n            // Friction\n            node.vx *= friction;\n            \n            node.disturb += node.vx;\n            \n            if(this.input)\n                                \n                node.disturb += (node.max - node.disturb) * this.reactivity;\n                                    \n            node.angle += node.speed;\n            \n        });\n\n        this.render();\n    },\n\n    render: function () {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n        let graphics = this.graphics;\n        let color = this.color;\n    \n        var currentIndex, nextIndex, xc, yc;\n\n        color.a = this.debug ? 255 : 255/2;\n\n        graphics.clear();\n                        \n        [].forEach.call(nodes, (node, index) => {\n    \n            currentIndex = nodes[nodes.length - 1];\n            nextIndex = nodes[0];\n                \n            xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n            yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n        \n            let strokeColor = cc.color().fromHEX(this.debug ? '#a9a9a9' : '#e5e5e5');\n            strokeColor.a = this.debug ? 255 : 255/2;\n            graphics.strokeColor = strokeColor;\n\n            graphics.fillColor = color;\n            graphics.lineWidth = this.debug ? 1 : 5;\n\n            graphics.moveTo(xc, yc);\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                \n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n            \n                graphics.quadraticCurveTo(currentIndex.x, currentIndex.y, xc, yc);\n                \n            }\n\n            this.debug ? null : graphics.fill();\n            graphics.stroke();\n                        \n            graphics.lineWidth = 1;\n            graphics.lineCap = cc.Graphics.LineCap.ROUND;\n            graphics.lineJoin = cc.Graphics.LineJoin.ROUND;\n            graphics.strokeColor.fromHEX('#a9a9a9');\n            graphics.fillColor.fromHEX('#a9a9a9');\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.moveTo(xc, yc);\n                \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.lineTo(xc, yc);\n                graphics.stroke();\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n            \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n                \n            }\n\n        });\n        \n        for(var index = 0; index < ripples.length; index++) {\n        \n            var ripple = ripples[index];\n            \n            let fillColor = cc.color().fromHEX('#ffffff');\n            fillColor.a = ripple.fade * 255;\n            graphics.fillColor = fillColor;\n            \n            graphics.circle(ripple.x, ripple.y, ripple.reactivity);\n\n            graphics.fill();\n        }\n                    \n    }\n});\n"]}