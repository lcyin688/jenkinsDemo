{"version":3,"sources":["assets/scripts/Global/SceneList.js"],"names":["TipsManager","require","SceneList","cc","Class","Component","properties","itemPrefab","type","Prefab","initItemCount","scrollView","ScrollView","bufferZone","searchBlock","Node","createItem","x","y","name","url","item","instantiate","itemComp","getComponent","label","string","node","addChild","init","menu","sceneList","itemList","updateTimer","updateInterval","lastContentPosY","initList","scenes","game","_sceneInfos","dict","i","length","startsWith","dirname","path","replace","scenename","basename","error","dirs","Object","keys","sort","push","scenenames","j","height","Math","min","itemInfo","updateItem","searchComp","setItemList","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","convertToNodeSpaceAR","update","dt","items","buffer","isDown","curItemCount","offset","itemNode","newIdx","index","newInfo"],"mappings":"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","sourceRoot":"/","sourcesContent":["const TipsManager = require('TipsManager');\n\nconst SceneList = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        itemPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        initItemCount: 0,\n        scrollView: cc.ScrollView,\n        bufferZone: 0, // when item is away from bufferZone, we relocate it\n        searchBlock: cc.Node\n    },\n\n    createItem: function (x, y, name, url) {\n        var item = cc.instantiate(this.itemPrefab);\n        var itemComp = item.getComponent('ListItem');\n        var label = itemComp.label;\n        label.string = name;\n\n        if (url) {\n            itemComp.url = url;\n        }\n\n        // item.width = w;\n        item.x = x;\n        item.y = y;\n        this.node.addChild(item);\n        return item;\n    },\n\n    init (menu) {\n        this.menu = menu;\n        this.sceneList = [];\n        this.itemList = [];\n        this.updateTimer = 0;\n        this.updateInterval = 0.2;\n        this.lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\n        TipsManager.init();\n        this.initList();\n    },\n\n    // use this for initialization\n    initList () {\n        var scenes = cc.game._sceneInfos;\n        var dict = {};\n\n        if (scenes) {\n            for (let i = 0; i < scenes.length; ++i) {\n                let url = scenes[i].url;\n                if (!url.startsWith('db://assets/cases/')) {\n                    continue;\n                }\n                let dirname = cc.path.dirname(url).replace('db://assets/cases/', '');\n                let scenename = cc.path.basename(url, '.fire');\n\n                if (!dirname) dirname = '_root';\n                if (!dict[dirname]) {\n                    dict[dirname] = {};\n                }\n                dict[dirname][scenename] = url;\n            }\n        }\n        else {\n            cc.error('failed to get scene list!');\n        }\n        // compile scene dict to an array\n        let dirs = Object.keys(dict);\n        dirs.sort();\n        for (let i = 0; i < dirs.length; ++i) {\n            this.sceneList.push({\n                name: dirs[i],\n                url: null\n            });\n            let scenenames = Object.keys(dict[dirs[i]]);\n            scenenames.sort();\n            for (let j = 0; j < scenenames.length; ++j) {\n                let name = scenenames[j];\n                let url = dict[dirs[i]][name];\n                this.sceneList.push({ name, url });\n            }\n        }\n        let y = 0;\n        this.node.height = (this.sceneList.length + 1) * 50;\n        let initItemCount = Math.min(this.initItemCount, this.sceneList.length);\n        for (let i = 0; i < initItemCount; ++i) {\n            let item = cc.instantiate(this.itemPrefab).getComponent('ListItem');\n            let itemInfo = this.sceneList[i];\n            item.init(this.menu);\n            this.node.addChild(item.node);\n            y -= 50;\n            item.updateItem (i, y, itemInfo.name, itemInfo.url);\n            this.itemList.push(item);\n        }\n\n        // get item list in order to check the loadScene condition\n        let searchComp = this.searchBlock.getComponent('SearchBlock');\n        searchComp.init(this.menu);\n        searchComp.setItemList(this.sceneList);\n    },\n\n    getPositionInView: function (item) { // get item position in scrollview's node space\n        let worldPos = item.parent.convertToWorldSpaceAR(item.position);\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\n        return viewPos;\n    },\n\n    update (dt) {\n        this.updateTimer += dt;\n        if (this.updateTimer < this.updateInterval) {\n            return; // we don't need to do the math every frame\n        }\n        this.updateTimer = 0;\n        let items = this.itemList;\n        let buffer = this.bufferZone;\n        let isDown = this.node.y < this.lastContentPosY; // scrolling direction\n        let curItemCount = this.itemList.length;\n        let offset = 50 * curItemCount;\n        for (let i = 0; i < curItemCount; ++i) {\n            let item = items[i];\n            let itemNode = item.node;\n            let viewPos = this.getPositionInView(itemNode);\n            if (isDown) {\n                // if away from buffer zone and not reaching top of content\n                if (viewPos.y < -buffer && itemNode.y + offset < 0) {\n                    let newIdx = item.index - curItemCount;\n                    let newInfo = this.sceneList[newIdx];\n                    item.updateItem(newIdx, itemNode.y + offset, newInfo.name, newInfo.url );\n                }\n            } else {\n                // if away from buffer zone and not reaching bottom of content\n                if (viewPos.y > buffer && itemNode.y - offset > -this.node.height) {\n                    let newIdx = item.index + curItemCount;\n                    let newInfo = this.sceneList[newIdx];\n                    item.updateItem(newIdx, itemNode.y - offset, newInfo.name, newInfo.url);\n                }\n            }\n        }\n        // update lastContentPosY\n        this.lastContentPosY = this.node.y;\n    },\n});\n"]}