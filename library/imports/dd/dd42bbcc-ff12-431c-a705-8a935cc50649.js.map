{"version":3,"sources":["assets/cases/dragonbones/DragonBonesAttach.js"],"names":["cc","Class","Component","properties","skeleton","type","dragonBones","ArmatureDisplay","targetPrefab","Prefab","modeLabel","Label","redBoneName","greenBoneName","blueBoneName","generateAllNodes","attachUtil","generateAllAttachedNodes","boneNodes","getAttachedNodes","boneNode","targetNode","instantiate","color","addChild","destroyUnusual","destroy","destroyAllNodes","destroyAllAttachedNodes","generateSomeNodes","generateAttachedNodes","destroySomeNodes","destroyAttachedNodes","changeMode","isCached","isAnimationCached","setAnimationCacheMode","AnimationCacheMode","REALTIME","string","SHARED_CACHE"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        skeleton : {\n            type: dragonBones.ArmatureDisplay,\n            default: null,\n        },\n        targetPrefab : {\n            type: cc.Prefab,\n            default: null,\n        },\n        modeLabel : {\n            type: cc.Label,\n            default: null,\n        },\n        redBoneName: \"\",\n        greenBoneName: \"\",\n        blueBoneName: \"\",\n    },\n\n    generateAllNodes () {\n        let attachUtil = this.skeleton.attachUtil;\n        attachUtil.generateAllAttachedNodes();\n        let boneNodes = attachUtil.getAttachedNodes(this.redBoneName);\n        let boneNode = boneNodes[0];\n        if (boneNode) {\n            let targetNode = cc.instantiate(this.targetPrefab);\n            targetNode.color = cc.color(255, 0, 0);\n            boneNode.addChild(targetNode);\n        }\n        boneNodes = attachUtil.getAttachedNodes(this.blueBoneName);\n        boneNode = boneNodes[0];\n        if (boneNode) {\n            let targetNode = cc.instantiate(this.targetPrefab);\n            targetNode.color = cc.color(0, 0, 255);\n            boneNode.addChild(targetNode);\n        }\n        // console.log(attachUtil._attachedNodeArray);\n        // console.log(attachUtil._boneIndexToNode);\n    },\n\n    destroyUnusual () {\n        let attachUtil = this.skeleton.attachUtil;\n        let boneNodes = attachUtil.getAttachedNodes(\"root\");\n        let boneNode = boneNodes[0];\n        if (boneNode) {\n            boneNode.destroy();\n        }\n        // console.log(attachUtil._attachedNodeArray);\n        // console.log(attachUtil._boneIndexToNode);\n    },\n\n    destroyAllNodes () {\n        let attachUtil = this.skeleton.attachUtil;\n        attachUtil.destroyAllAttachedNodes();\n        // console.log(attachUtil._attachedNodeArray);\n        // console.log(attachUtil._boneIndexToNode);\n    },\n\n    generateSomeNodes () {\n        let attachUtil = this.skeleton.attachUtil;\n        let boneNodes = attachUtil.generateAttachedNodes(this.greenBoneName);\n        let boneNode = boneNodes[0];\n        if (boneNode) {\n            let targetNode = cc.instantiate(this.targetPrefab);\n            targetNode.color = cc.color(0, 255, 0);\n            boneNode.addChild(targetNode);\n        }\n        // console.log(attachUtil._attachedNodeArray);\n        // console.log(attachUtil._boneIndexToNode);\n    },\n\n    destroySomeNodes () {\n        let attachUtil = this.skeleton.attachUtil;\n        attachUtil.destroyAttachedNodes(this.greenBoneName);\n        // console.log(attachUtil._attachedNodeArray);\n        // console.log(attachUtil._boneIndexToNode);\n    },\n\n    changeMode () {\n        let isCached = this.skeleton.isAnimationCached();\n        if (isCached) {\n            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.REALTIME);\n            this.modeLabel.string = \"cache\";\n        } else {\n            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.SHARED_CACHE);\n            this.modeLabel.string = \"realtime\";\n        }\n    },\n});"]}