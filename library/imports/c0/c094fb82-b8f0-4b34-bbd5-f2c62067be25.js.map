{"version":3,"sources":["assets/cases/3d_physics/scripts/trigger-testing.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class triggertesting extends cc.Component {\n\n    private static _idCounter = 0;\n    public readonly id: number;\n\n    private _prev: Boolean[] = [];\n    \n    @property({ type: cc.Material })\n    colliderMaterial: cc.Material = null;\n\n    @property({ type: cc.Material })\n    unColliderMaterial: cc.Material = null;\n\n    private _colliderCount:number = 0;\n\n    private _enterType = 'collision-enter';\n    private _stayType = 'collision-stay';\n    private _exitType = 'collision-exit';\n\n    @property\n    isTrigger:boolean = false;\n\n    constructor () {\n        super();\n        this.id = triggertesting._idCounter++;\n    }\n\n    start () {\n        if (this.isTrigger || CC_PHYSICS_BUILTIN) {\n            this._enterType = 'trigger-enter';\n            this._stayType = 'trigger-stay';\n            this._exitType = 'trigger-exit';\n        }\n\n        let trigger = this.getComponent(cc.Collider3D);\n        if (trigger) {\n            trigger.on(this._enterType, this.onTrigger, this);\n            trigger.on(this._stayType, this.onTrigger, this);\n            trigger.on(this._exitType, this.onTrigger, this);\n        }\n    }\n\n    onTrigger (event) {\n        if (event.type == this._enterType) {\n            this._colliderCount++;\n        }\n        else if (event.type == this._stayType) {\n            if (!this._prev[event.otherCollider._id]) {\n                this._prev[event.otherCollider._id] = true;\n            } else {\n                return;\n            }\n        } else if (event.type == this._exitType) {\n            this._prev[event.otherCollider._id] = false;\n            this._colliderCount--;\n        }\n\n        const modelCom = this.node.getComponent(cc.MeshRenderer);\n        if (this._colliderCount > 0) {\n            modelCom.setMaterial(0, this.colliderMaterial);\n            modelCom.markForRender(true);\n        } else {\n            modelCom.setMaterial(0, this.unColliderMaterial);\n            modelCom.markForRender(true);\n        } \n\n        // let infoStr = event.selfCollider.node.name + '__' + event.type + '__' + event.otherCollider.node.name + ' ';\n        // console.log(infoStr);\n    }\n}\n"]}