{"version":3,"sources":["assets/i18n/polyglot.js"],"names":["root","factory","define","amd","exports","module","Polyglot","global","replace","String","prototype","options","phrases","extend","currentLocale","locale","allowMissing","warn","VERSION","newLocale","morePhrases","prefix","phrase","key","hasOwnProperty","unset","clear","newPhrases","t","result","smart_count","_","clone","choosePluralForm","interpolate","has","delimeter","pluralTypes","chinese","n","german","french","russian","czech","polish","icelandic","pluralTypeToLanguages","langToTypeMap","mapping","type","langs","l","ret","trimRe","trim","str","call","text","count","texts","chosenText","split","pluralTypeIndex","pluralTypeName","langToPluralType","en","dollarRegex","dollarBillsYall","arg","replacement","RegExp","message","console","source","prop"],"mappings":"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","sourceRoot":"/","sourcesContent":["//     (c) 2012-2016 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documention:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return factory(root);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.Polyglot = factory(root);\n  }\n}(typeof global !== 'undefined' ? global : this, function(root) {\n  'use strict';\n\n  var replace = String.prototype.replace;\n\n  // ### Polyglot class constructor\n  function Polyglot(options) {\n    options = options || {};\n    this.phrases = {};\n    this.extend(options.phrases || {});\n    this.currentLocale = options.locale || 'en';\n    this.allowMissing = !!options.allowMissing;\n    this.warn = options.warn || warn;\n  }\n\n  // ### Version\n  Polyglot.VERSION = '1.0.0';\n\n  // ### polyglot.locale([locale])\n  //\n  // Get or set locale. Internally, Polyglot only uses locale for pluralization.\n  Polyglot.prototype.locale = function(newLocale) {\n    if (newLocale) this.currentLocale = newLocale;\n    return this.currentLocale;\n  };\n\n  // ### polyglot.extend(phrases)\n  //\n  // Use `extend` to tell Polyglot how to translate a given key.\n  //\n  //     polyglot.extend({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     });\n  //\n  // The key can be any string.  Feel free to call `extend` multiple times;\n  // it will override any phrases with the same key, but leave existing phrases\n  // untouched.\n  //\n  // It is also possible to pass nested phrase objects, which get flattened\n  // into an object with the nested keys concatenated using dot notation.\n  //\n  //     polyglot.extend({\n  //       \"nav\": {\n  //         \"hello\": \"Hello\",\n  //         \"hello_name\": \"Hello, %{name}\",\n  //         \"sidebar\": {\n  //           \"welcome\": \"Welcome\"\n  //         }\n  //       }\n  //     });\n  //\n  //     console.log(polyglot.phrases);\n  //     // {\n  //     //   'nav.hello': 'Hello',\n  //     //   'nav.hello_name': 'Hello, %{name}',\n  //     //   'nav.sidebar.welcome': 'Welcome'\n  //     // }\n  //\n  // `extend` accepts an optional second argument, `prefix`, which can be used\n  // to prefix every key in the phrases object with some string, using dot\n  // notation.\n  //\n  //     polyglot.extend({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     }, \"nav\");\n  //\n  //     console.log(polyglot.phrases);\n  //     // {\n  //     //   'nav.hello': 'Hello',\n  //     //   'nav.hello_name': 'Hello, %{name}'\n  //     // }\n  //\n  // This feature is used internally to support nested phrase objects.\n  Polyglot.prototype.extend = function(morePhrases, prefix) {\n    var phrase;\n\n    for (var key in morePhrases) {\n      if (morePhrases.hasOwnProperty(key)) {\n        phrase = morePhrases[key];\n        if (prefix) key = prefix + '.' + key;\n        if (typeof phrase === 'object') {\n          this.extend(phrase, key);\n        } else {\n          this.phrases[key] = phrase;\n        }\n      }\n    }\n  };\n\n  // ### polyglot.unset(phrases)\n  // Use `unset` to selectively remove keys from a polyglot instance.\n  //\n  //     polyglot.unset(\"some_key\");\n  //     polyglot.unset({\n  //       \"hello\": \"Hello\",\n  //       \"hello_name\": \"Hello, %{name}\"\n  //     });\n  //\n  // The unset method can take either a string (for the key), or an object hash with\n  // the keys that you would like to unset.\n  Polyglot.prototype.unset = function(morePhrases, prefix) {\n    var phrase;\n\n    if (typeof morePhrases === 'string') {\n      delete this.phrases[morePhrases];\n    } else {\n      for (var key in morePhrases) {\n        if (morePhrases.hasOwnProperty(key)) {\n          phrase = morePhrases[key];\n          if (prefix) key = prefix + '.' + key;\n          if (typeof phrase === 'object') {\n            this.unset(phrase, key);\n          } else {\n            delete this.phrases[key];\n          }\n        }\n      }\n    }\n  };\n\n  // ### polyglot.clear()\n  //\n  // Clears all phrases. Useful for special cases, such as freeing\n  // up memory if you have lots of phrases but no longer need to\n  // perform any translation. Also used internally by `replace`.\n  Polyglot.prototype.clear = function() {\n    this.phrases = {};\n  };\n\n  // ### polyglot.replace(phrases)\n  //\n  // Completely replace the existing phrases with a new set of phrases.\n  // Normally, just use `extend` to add more phrases, but under certain\n  // circumstances, you may want to make sure no old phrases are lying around.\n  Polyglot.prototype.replace = function(newPhrases) {\n    this.clear();\n    this.extend(newPhrases);\n  };\n\n\n  // ### polyglot.t(key, options)\n  //\n  // The most-used method. Provide a key, and `t` will return the\n  // phrase.\n  //\n  //     polyglot.t(\"hello\");\n  //     => \"Hello\"\n  //\n  // The phrase value is provided first by a call to `polyglot.extend()` or\n  // `polyglot.replace()`.\n  //\n  // Pass in an object as the second argument to perform interpolation.\n  //\n  //     polyglot.t(\"hello_name\", {name: \"Spike\"});\n  //     => \"Hello, Spike\"\n  //\n  // If you like, you can provide a default value in case the phrase is missing.\n  // Use the special option key \"_\" to specify a default.\n  //\n  //     polyglot.t(\"i_like_to_write_in_language\", {\n  //       _: \"I like to write in %{language}.\",\n  //       language: \"JavaScript\"\n  //     });\n  //     => \"I like to write in JavaScript.\"\n  //\n  Polyglot.prototype.t = function(key, options) {\n    var phrase, result;\n    options = options == null ? {} : options;\n    // allow number as a pluralization shortcut\n    if (typeof options === 'number') {\n      options = {smart_count: options};\n    }\n    if (typeof this.phrases[key] === 'string') {\n      phrase = this.phrases[key];\n    } else if (typeof options._ === 'string') {\n      phrase = options._;\n    } else if (this.allowMissing) {\n      phrase = key;\n    } else {\n      this.warn('Missing translation for key: \"'+key+'\"');\n      result = key;\n    }\n    if (typeof phrase === 'string') {\n      options = clone(options);\n      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);\n      result = interpolate(result, options);\n    }\n    return result;\n  };\n\n\n  // ### polyglot.has(key)\n  //\n  // Check if polyglot has a translation for given key\n  Polyglot.prototype.has = function(key) {\n    return key in this.phrases;\n  };\n\n\n  // #### Pluralization methods\n  // The string that separates the different phrase possibilities.\n  var delimeter = '||||';\n\n  // Mapping from pluralization group plural logic.\n  var pluralTypes = {\n    chinese:   function(n) { return 0; },\n    german:    function(n) { return n !== 1 ? 1 : 0; },\n    french:    function(n) { return n > 1 ? 1 : 0; },\n    russian:   function(n) { return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2; },\n    czech:     function(n) { return (n === 1) ? 0 : (n >= 2 && n <= 4) ? 1 : 2; },\n    polish:    function(n) { return (n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2); },\n    icelandic: function(n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\n  };\n\n  // Mapping from pluralization group to individual locales.\n  var pluralTypeToLanguages = {\n    chinese:   ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\n    german:    ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\n    french:    ['fr', 'tl', 'pt-br'],\n    russian:   ['hr', 'ru'],\n    czech:     ['cs', 'sk'],\n    polish:    ['pl'],\n    icelandic: ['is']\n  };\n\n  function langToTypeMap(mapping) {\n    var type, langs, l, ret = {};\n    for (type in mapping) {\n      if (mapping.hasOwnProperty(type)) {\n        langs = mapping[type];\n        for (l in langs) {\n          ret[langs[l]] = type;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // Trim a string.\n  var trimRe = /^\\s+|\\s+$/g;\n  function trim(str){\n    return replace.call(str, trimRe, '');\n  }\n\n  // Based on a phrase text that contains `n` plural forms separated\n  // by `delimeter`, a `locale`, and a `count`, choose the correct\n  // plural form, or none if `count` is `null`.\n  function choosePluralForm(text, locale, count){\n    var ret, texts, chosenText;\n    if (count != null && text) {\n      texts = text.split(delimeter);\n      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];\n      ret = trim(chosenText);\n    } else {\n      ret = text;\n    }\n    return ret;\n  }\n\n  function pluralTypeName(locale) {\n    var langToPluralType = langToTypeMap(pluralTypeToLanguages);\n    return langToPluralType[locale] || langToPluralType.en;\n  }\n\n  function pluralTypeIndex(locale, count) {\n    return pluralTypes[pluralTypeName(locale)](count);\n  }\n\n  // ### interpolate\n  //\n  // Does the dirty work. Creates a `RegExp` object for each\n  // interpolation placeholder.\n  var dollarRegex = /\\$/g;\n  var dollarBillsYall = '$$$$';\n  function interpolate(phrase, options) {\n    for (var arg in options) {\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg];\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\n        }\n        // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n        phrase = replace.call(phrase, new RegExp('%\\\\{'+arg+'\\\\}', 'g'), replacement);\n      }\n    }\n    return phrase;\n  }\n\n  // ### warn\n  //\n  // Provides a warning in the console if a phrase key is missing.\n  function warn(message) {\n    root.console && root.console.warn && root.console.warn('WARNING: ' + message);\n  }\n\n  // ### clone\n  //\n  // Clone an object.\n  function clone(source) {\n    var ret = {};\n    for (var prop in source) {\n      ret[prop] = source[prop];\n    }\n    return ret;\n  }\n\n  return Polyglot;\n}));\n"]}